// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      Role
  student   Student?
  teacher   Teacher?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String?
}

model Student {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  nim       String    @unique
  enrollments Enrollment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Teacher {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @unique
  nip       String    @unique
  courses   Course[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course {
  id          Int           @id @default(autoincrement())
  name        String
  code        String        @unique
  teacher     Teacher       @relation(fields: [teacherId], references: [id])
  teacherId   Int
  enrollments Enrollment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  grade     Grade?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id            Int        @id @default(autoincrement())
  enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId  Int        @unique
  grade         Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}
